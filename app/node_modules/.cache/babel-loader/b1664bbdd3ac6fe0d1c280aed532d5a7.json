{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\taisi\\\\IT LEARNING\\\\project\\\\app\\\\src\\\\components\\\\FormBuilder.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport FormField from './FormField';\nimport * as utils from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n;\n\nconst FormBuilder = _ref => {\n  _s();\n\n  let {\n    formConfig,\n    updateData,\n    registerValue\n  } = _ref;\n  const [formValues, setFormValues] = useState({});\n  const [formValuesIsError, setFormValuesError] = useState({});\n  const [textError, setTextError] = useState({});\n  useEffect(() => {\n    formConfig.map(obj => {\n      setFormValues(prevState => ({ ...prevState,\n        [obj.name]: ''\n      }));\n      setFormValuesError(prevState => ({ ...prevState,\n        [obj.name]: true\n      }));\n      setTextError(prevState => ({ ...prevState,\n        [obj.name]: ''\n      }));\n    });\n  }, []);\n\n  const onChangeValue = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    setFormValues({ ...formValues,\n      [name]: value\n    });\n  };\n\n  const submitRegisterForm = () => {\n    const copyformValuesIsError = { ...formValuesIsError\n    };\n    const copyTextError = { ...textError\n    };\n    formConfig.map(obj => {\n      const validationsKeys = Object.keys(obj.validation);\n      const minLength = obj.validation.minLength;\n      const maxLength = obj.validation.maxLength;\n      const key = obj.name;\n\n      if (validationsKeys.includes('maxLength')) {\n        copyformValuesIsError[key] = !utils.checkMinLength(formValues[key], minLength);\n        copyTextError[key] = copyformValuesIsError[key] ? `Please, enter between ${minLength} and ${maxLength} symbols` : '';\n      }\n\n      if (validationsKeys.includes('minLength')) {\n        copyformValuesIsError[key] = !utils.checkMinLength(formValues[key], minLength);\n        copyTextError[key] = copyformValuesIsError[key] ? `Please, enter ${minLength} symbols` : '';\n      }\n\n      if (validationsKeys.includes('regExp')) {\n        copyformValuesIsError[key] = !utils.checkEmail(formValues[key]);\n        copyTextError[key] = copyformValuesIsError[key] ? 'Please, enter a valid email' : '';\n      }\n\n      if (validationsKeys.includes('theSamePassword')) {\n        copyformValuesIsError[key] = !utils.checkConfirmedPassword(formValues[key], 'formValues[key]');\n        copyTextError[key] = copyformValuesIsError[key] ? 'Please, confirm your password' : '';\n      }\n    });\n    setTextError(copyTextError);\n    setFormValuesError(copyformValuesIsError); // Object.values(textError)\n    // .every(item => item !== '' && console.log(formValues))\n    // Object.values(textError)\n    // .every(item => item !== '' && onClick)\n  };\n\n  const sendSubmittedData = () => {\n    console.log('updateData', updateData);\n    submitRegisterForm();\n    Object.values(textError).every(item => item !== '') && updateData(formValues);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [formConfig && formConfig.map(obj => /*#__PURE__*/_jsxDEV(FormField, {\n      value: formValues[obj.name],\n      name: obj.name,\n      type: obj.type,\n      placeholder: obj.placeholder,\n      onChange: onChangeValue,\n      errorText: textError[obj.name]\n    }, obj.placeholder, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"registration-form__btn\",\n      type: \"button\",\n      value: \"LOGIN\",\n      onClick: sendSubmittedData(),\n      children: \"SUBMIT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FormBuilder, \"+e/HF9gxCuGmKlicw6Mp/CHdrwY=\");\n\n_c = FormBuilder;\nexport default FormBuilder;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormBuilder\");","map":{"version":3,"sources":["C:/Users/taisi/IT LEARNING/project/app/src/components/FormBuilder.tsx"],"names":["React","useState","useEffect","FormField","utils","FormBuilder","formConfig","updateData","registerValue","formValues","setFormValues","formValuesIsError","setFormValuesError","textError","setTextError","map","obj","prevState","name","onChangeValue","e","value","target","submitRegisterForm","copyformValuesIsError","copyTextError","validationsKeys","Object","keys","validation","minLength","maxLength","key","includes","checkMinLength","checkEmail","checkConfirmedPassword","sendSubmittedData","console","log","values","every","item","type","placeholder"],"mappings":"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","sourcesContent":["import React,  { useState, useEffect } from 'react'\nimport FormField from './FormField'\nimport * as utils from '../utils'\nimport { formConfigIterface} from '../formConfig'\n \ninterface formBuilderProps{ \n    formConfig: formConfigIterface[];\n    updateData?: (value: any) => void,\n    registerValue: {}\n};\n\ninterface propsValues{\n    [name: string]: string\n}\n\ninterface propsErorrs{\n    [name: string]: boolean\n}\n\ninterface propsErorrText{\n    [name: string]: string\n}\n\nconst FormBuilder:React.FC<formBuilderProps> = ({formConfig, updateData, registerValue}) : React.ReactElement => {\n\n    const [formValues, setFormValues] = useState<propsValues>({})\n    const [formValuesIsError, setFormValuesError] = useState<propsErorrs>({})\n    const [textError, setTextError] = useState<propsErorrText>({})\n\n    useEffect(() => {\n        formConfig.map(obj => {\n            setFormValues(prevState => ({...prevState, [obj.name]: ''}))\n            setFormValuesError(prevState => ({...prevState, [obj.name]: true}))\n            setTextError(prevState => ({...prevState, [obj.name]: ''}))\n        });\n\n\n    }, [])\n    \n    const onChangeValue = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const {value, name} = e.target\n\n        setFormValues({...formValues, [name]: value})\n    }\n\n    const submitRegisterForm = () => {\n        const copyformValuesIsError:any = {...formValuesIsError}\n        const copyTextError:propsErorrText = {...textError}\n\n        formConfig.map(obj => {\n            const validationsKeys = Object.keys(obj.validation)\n            const minLength = obj.validation.minLength\n            const maxLength = obj.validation.maxLength\n            const key = obj.name\n\n                if (validationsKeys.includes('maxLength')) {\n                    copyformValuesIsError[key] = !(utils.checkMinLength(formValues[key], minLength))\n                    copyTextError[key] = copyformValuesIsError[key] ? `Please, enter between ${minLength} and ${maxLength} symbols` : ''\n                }\n                \n                if (validationsKeys.includes('minLength')) {\n                    copyformValuesIsError[key] = !(utils.checkMinLength(formValues[key], minLength))\n                    copyTextError[key] = copyformValuesIsError[key] ? `Please, enter ${minLength} symbols` : ''\n                } \n                \n                if (validationsKeys.includes('regExp')) {\n                    copyformValuesIsError[key] = !(utils.checkEmail(formValues[key]))\n                    copyTextError[key] = copyformValuesIsError[key] ? 'Please, enter a valid email' : '';\n                } \n\n                if (validationsKeys.includes('theSamePassword')) {\n                    copyformValuesIsError[key] = !(utils.checkConfirmedPassword(formValues[key], 'formValues[key]'))\n                    copyTextError[key] = copyformValuesIsError[key] ? 'Please, confirm your password' : '';\n                }\n            \n        });\n\n        setTextError(copyTextError)\n        setFormValuesError(copyformValuesIsError)\n    \n\n        // Object.values(textError)\n        // .every(item => item !== '' && console.log(formValues))\n\n        // Object.values(textError)\n        // .every(item => item !== '' && onClick)\n    }\n\n    const sendSubmittedData = () => {\n        console.log('updateData', updateData)\n        submitRegisterForm()\n        Object.values(textError)\n        .every(item => item !== '') && updateData(formValues)\n    }\n\n\n    return(\n        <>\n            {formConfig && formConfig.map(obj => \n                <FormField \n                    value={formValues[obj.name]}\n                    key={obj.placeholder}\n                    name={obj.name}\n                    type={obj.type}\n                    placeholder={obj.placeholder}\n                    onChange={onChangeValue}\n                    errorText={textError[obj.name]}\n                /> \n            )}\n\n            <button className='registration-form__btn'\n            type=\"button\" value=\"LOGIN\"\n            onClick={sendSubmittedData()}>\n                SUBMIT\n            </button>\n        </>\n    )\n    \n\n}\n\nexport default FormBuilder"]},"metadata":{},"sourceType":"module"}