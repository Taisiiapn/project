{"ast":null,"code":"var _jsxFileName = \"C:\\\\tech projects\\\\project\\\\app\\\\src\\\\components\\\\FormBuilder.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport FormField from './FormField';\nimport * as utils from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n;\n\nconst FormBuilder = _ref => {\n  _s();\n\n  let {\n    formConfig,\n    func = () => {}\n  } = _ref;\n  const [formValues, setFormValues] = useState({});\n  const [formValuesIsError, setFormValuesError] = useState({});\n  const [textError, setTextError] = useState({});\n  const [allInputsCorrect, setAllInputsCorrect] = useState(false);\n  useEffect(() => {\n    formConfig.map(obj => {\n      setFormValues(prevState => ({ ...prevState,\n        [obj.name]: ''\n      }));\n      setFormValuesError(prevState => ({ ...prevState,\n        [obj.name]: true\n      }));\n      setTextError(prevState => ({ ...prevState,\n        [obj.name]: ''\n      }));\n    });\n  }, []);\n\n  const onChangeValue = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    setFormValues({ ...formValues,\n      [name]: value\n    });\n  };\n\n  const submitRegisterForm = () => {\n    const copyformValuesIsError = { ...formValuesIsError\n    };\n    const copyTextError = { ...textError\n    };\n    formConfig.map(obj => {\n      const validationsKeys = Object.keys(obj.validation);\n      const minLength = obj.validation.minLength;\n      const maxLength = obj.validation.maxLength;\n      const key = obj.name;\n\n      if (validationsKeys.includes('maxLength')) {\n        copyformValuesIsError[key] = !utils.checkMinLength(formValues[key], minLength);\n        copyTextError[key] = copyformValuesIsError[key] ? `Please, enter between ${minLength} and ${maxLength} symbols` : '';\n      }\n\n      if (validationsKeys.includes('minLength')) {\n        copyformValuesIsError[key] = !utils.checkMinLength(formValues[key], minLength);\n        copyTextError[key] = copyformValuesIsError[key] ? `Please, enter more than ${minLength} symbols` : '';\n      }\n\n      if (validationsKeys.includes('regExp')) {\n        copyformValuesIsError[key] = !utils.checkEmail(formValues[key]);\n        copyTextError[key] = copyformValuesIsError[key] ? 'Please, enter a valid email' : '';\n      }\n\n      if (validationsKeys.includes('theSamePassword')) {\n        copyformValuesIsError[key] = !utils.checkConfirmedPassword(formValues[key], formValues.password);\n        copyTextError[key] = copyformValuesIsError[key] ? 'Please, confirm your password' : '';\n      }\n    });\n    Object.values(copyTextError).every(item => item !== '') ? setAllInputsCorrect(allInputsCorrect) : setAllInputsCorrect(!allInputsCorrect);\n    setTextError(copyTextError);\n    setFormValuesError(copyformValuesIsError);\n  };\n\n  const sendSubmittedData = () => {\n    submitRegisterForm();\n    allInputsCorrect && func(formValues);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [formConfig && formConfig.map(obj => /*#__PURE__*/_jsxDEV(FormField, {\n      value: formValues[obj.name],\n      name: obj.name,\n      type: obj.type,\n      placeholder: obj.placeholder,\n      onChange: onChangeValue,\n      errorText: textError[obj.name]\n    }, obj.placeholder, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"registration-form__btn\",\n      type: \"button\",\n      value: \"LOGIN\",\n      onClick: sendSubmittedData,\n      children: \"SUBMIT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(FormBuilder, \"eCMEHy9p5EVaFbfK59uhaY9cqqY=\");\n\n_c = FormBuilder;\nexport default FormBuilder;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormBuilder\");","map":{"version":3,"sources":["C:/tech projects/project/app/src/components/FormBuilder.tsx"],"names":["React","useState","useEffect","FormField","utils","FormBuilder","formConfig","func","formValues","setFormValues","formValuesIsError","setFormValuesError","textError","setTextError","allInputsCorrect","setAllInputsCorrect","map","obj","prevState","name","onChangeValue","e","value","target","submitRegisterForm","copyformValuesIsError","copyTextError","validationsKeys","Object","keys","validation","minLength","maxLength","key","includes","checkMinLength","checkEmail","checkConfirmedPassword","password","values","every","item","sendSubmittedData","type","placeholder"],"mappings":"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","sourcesContent":["import React,  { useState, useEffect } from 'react'\r\nimport FormField from './FormField'\r\nimport * as utils from '../utils'\r\nimport { formConfigIterface} from '../formConfig'\r\n \r\ninterface formBuilderProps{ \r\n    formConfig: formConfigIterface[];\r\n    sendDataToRedux\r\n    func?: (value: any) => void\r\n};\r\n\r\ninterface propsValues{\r\n    [name: string]: string\r\n}\r\n\r\ninterface propsErorrs{\r\n    [name: string]: boolean\r\n}\r\n\r\ninterface propsErorrText{\r\n    [name: string]: string\r\n}\r\n\r\nconst FormBuilder:React.FC<formBuilderProps> = ({formConfig, func = () => {}}) : React.ReactElement => {\r\n\r\n    const [formValues, setFormValues] = useState<propsValues>({})\r\n    const [formValuesIsError, setFormValuesError] = useState<propsErorrs>({})\r\n    const [textError, setTextError] = useState<propsErorrText>({})\r\n    const [allInputsCorrect, setAllInputsCorrect] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        formConfig.map(obj => {\r\n            setFormValues(prevState => ({...prevState, [obj.name]: ''}))\r\n            setFormValuesError(prevState => ({...prevState, [obj.name]: true}))\r\n            setTextError(prevState => ({...prevState, [obj.name]: ''}))\r\n        });\r\n\r\n\r\n    }, [])\r\n    \r\n    const onChangeValue = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const {value, name} = e.target\r\n\r\n        setFormValues({...formValues, [name]: value})\r\n    }\r\n\r\n    const submitRegisterForm = () => {\r\n        const copyformValuesIsError:any = {...formValuesIsError}\r\n        const copyTextError:propsErorrText = {...textError}\r\n\r\n        formConfig.map(obj => {\r\n            const validationsKeys = Object.keys(obj.validation)\r\n            const minLength = obj.validation.minLength\r\n            const maxLength = obj.validation.maxLength\r\n            const key = obj.name\r\n\r\n                if (validationsKeys.includes('maxLength')) {\r\n                    copyformValuesIsError[key] = !(utils.checkMinLength(formValues[key], minLength))\r\n                    copyTextError[key] = copyformValuesIsError[key] ? `Please, enter between ${minLength} and ${maxLength} symbols` : ''\r\n                }\r\n                \r\n                if (validationsKeys.includes('minLength')) {\r\n                    copyformValuesIsError[key] = !(utils.checkMinLength(formValues[key], minLength))\r\n                    copyTextError[key] = copyformValuesIsError[key] ? `Please, enter more than ${minLength} symbols` : ''\r\n                } \r\n                \r\n                if (validationsKeys.includes('regExp')) {\r\n                    copyformValuesIsError[key] = !(utils.checkEmail(formValues[key]))\r\n                    copyTextError[key] = copyformValuesIsError[key] ? 'Please, enter a valid email' : '';\r\n                } \r\n\r\n                if (validationsKeys.includes('theSamePassword')) {\r\n                    copyformValuesIsError[key] = !(utils.checkConfirmedPassword(formValues[key], formValues.password))\r\n                    copyTextError[key] = copyformValuesIsError[key] ? 'Please, confirm your password' : '';\r\n                }\r\n            \r\n        });\r\n\r\n        (Object.values(copyTextError)\r\n            .every(item => item !== '')) \r\n            ? setAllInputsCorrect(allInputsCorrect)\r\n            : setAllInputsCorrect(!allInputsCorrect)\r\n\r\n        setTextError(copyTextError)\r\n        setFormValuesError(copyformValuesIsError)\r\n\r\n    \r\n\r\n    }\r\n\r\n    const sendSubmittedData = () => {\r\n        submitRegisterForm()\r\n        allInputsCorrect && func(formValues)\r\n        \r\n    }\r\n\r\n\r\n    return(\r\n        <>\r\n            {formConfig && formConfig.map(obj => \r\n                <FormField \r\n                    value={formValues[obj.name]}\r\n                    key={obj.placeholder}\r\n                    name={obj.name}\r\n                    type={obj.type}\r\n                    placeholder={obj.placeholder}\r\n                    onChange={onChangeValue}\r\n                    errorText={textError[obj.name]}\r\n                /> \r\n            )}\r\n\r\n            <button className='registration-form__btn'\r\n            type=\"button\" value=\"LOGIN\"\r\n            onClick={sendSubmittedData}>\r\n                SUBMIT\r\n            </button>\r\n        </>\r\n    )\r\n    \r\n\r\n}\r\n\r\nexport default FormBuilder"]},"metadata":{},"sourceType":"module"}